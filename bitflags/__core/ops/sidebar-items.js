initSidebarItems({"struct":[["Range","A (half-open) range which is bounded at both ends."],["RangeFrom","A range which is only bounded below."],["RangeFull","An unbounded range."],["RangeTo","A range which is only bounded above."]],"trait":[["Add","The `Add` trait is used to specify the functionality of `+`."],["AddAssign","The `AddAssign` trait is used to specify the functionality of `+=`."],["BitAnd","The `BitAnd` trait is used to specify the functionality of `&`."],["BitAndAssign","The `BitAndAssign` trait is used to specify the functionality of `&=`."],["BitOr","The `BitOr` trait is used to specify the functionality of `|`."],["BitOrAssign","The `BitOrAssign` trait is used to specify the functionality of `|=`."],["BitXor","The `BitXor` trait is used to specify the functionality of `^`."],["BitXorAssign","The `BitXorAssign` trait is used to specify the functionality of `^=`."],["BoxPlace","Specialization of `Place` trait supporting `box EXPR`."],["Boxed","Core trait for the `box EXPR` form."],["CoerceUnsized","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee."],["Deref","The `Deref` trait is used to specify the functionality of dereferencing operations, like `*v`."],["DerefMut","The `DerefMut` trait is used to specify the functionality of dereferencing mutably like `*v = 1;`"],["Div","The `Div` trait is used to specify the functionality of `/`."],["DivAssign","The `DivAssign` trait is used to specify the functionality of `/=`."],["Drop","The `Drop` trait is used to run some code when a value goes out of scope. This is sometimes called a 'destructor'."],["Fn","A version of the call operator that takes an immutable receiver."],["FnMut","A version of the call operator that takes a mutable receiver."],["FnOnce","A version of the call operator that takes a by-value receiver."],["InPlace","Specialization of `Place` trait supporting `in (PLACE) EXPR`."],["Index","The `Index` trait is used to specify the functionality of indexing operations like `arr[idx]` when used in an immutable context."],["IndexMut","The `IndexMut` trait is used to specify the functionality of indexing operations like `arr[idx]`, when used in a mutable context."],["Mul","The `Mul` trait is used to specify the functionality of `*`."],["MulAssign","The `MulAssign` trait is used to specify the functionality of `*=`."],["Neg","The `Neg` trait is used to specify the functionality of unary `-`."],["Not","The `Not` trait is used to specify the functionality of unary `!`."],["Place","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait."],["Placer","Interface to implementations of  `in (PLACE) EXPR`."],["Rem","The `Rem` trait is used to specify the functionality of `%`."],["RemAssign","The `RemAssign` trait is used to specify the functionality of `%=`."],["Shl","The `Shl` trait is used to specify the functionality of `<<`."],["ShlAssign","The `ShlAssign` trait is used to specify the functionality of `<<=`."],["Shr","The `Shr` trait is used to specify the functionality of `>>`."],["ShrAssign","The `ShrAssign` trait is used to specify the functionality of `>>=`."],["Sub","The `Sub` trait is used to specify the functionality of `-`."],["SubAssign","The `SubAssign` trait is used to specify the functionality of `-=`."]]});